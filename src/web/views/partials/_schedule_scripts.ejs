<script>
  // Function to format time in 12-hour format with AM/PM
  function formatTime(minutes) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    const period = hours >= 12 ? "PM" : "AM";
    const displayHours = hours % 12 || 12;
    return `${displayHours}:${mins.toString().padStart(2, "0")} ${period}`;
  }

  // Function to generate PDF
  function generatePDF() {
    const doc = new jsPDF();
    let y = 20;

    // Add title
    doc.setFontSize(16);
    doc.text("FLL Competition Schedule", 105, y, { align: "center" });
    y += 20;

    // Get schedule data from server
    const judgingSchedule = <%- JSON.stringify(schedule.judgingSchedule) %>;
    const tableRuns = <%- JSON.stringify(schedule.tableRuns) %>;
    const teamsSchedule = <%- JSON.stringify(schedule.teamsSchedule) %>;

    // Add Judging Schedule
    doc.setFontSize(14);
    doc.text("Judging Schedule", 14, y);
    y += 10;

    doc.setFontSize(10);
    judgingSchedule.forEach((room, roomIndex) => {
      if (room.length > 0) {
        doc.text(`Room ${roomIndex + 1}:`, 14, y);
        y += 7;
        room.forEach((event) => {
          const timeStr = formatTime(event.startTime);
          doc.text(
            `${timeStr} - ${event.teamName} (#${
              event.teamNumber || event.teamID
            })`,
            20,
            y
          );
          y += 7;
        });
        y += 5;
      }
    });

    // Add Robot Game Schedule
    y += 10;
    doc.setFontSize(14);
    doc.text("Robot Game Schedule", 14, y);
    y += 10;

    doc.setFontSize(10);
    tableRuns.forEach((table, tableIndex) => {
      if (table.length > 0) {
        doc.text(`Table ${tableIndex + 1}:`, 14, y);
        y += 7;
        table.forEach((event) => {
          const timeStr = formatTime(event.startTime);
          doc.text(
            `${timeStr} - ${event.teamName} (#${
              event.teamNumber || event.teamID
            })`,
            20,
            y
          );
          y += 7;
        });
        y += 5;
      }
    });

    // Add Team Schedules
    y += 10;
    doc.setFontSize(14);
    doc.text("Team Schedules", 14, y);
    y += 10;

    doc.setFontSize(10);
    teamsSchedule.forEach((teamEvents, teamIndex) => {
      if (teamIndex > 0 && teamEvents.length > 0) {
        doc.text(
          `Team ${teamIndex}: ${teamEvents[0].teamName} (#${
            teamEvents[0].teamNumber || teamIndex
          })`,
          14,
          y
        );
        y += 7;
        teamEvents.forEach((event) => {
          const timeStr = formatTime(event.startTime);
          let eventType = "";
          if (event.type === "tableRun") {
            eventType = "Robot Game";
          } else if (event.type === "robotJudging") {
            eventType = "Robot Design Judging";
          } else if (event.type === "projectJudging") {
            eventType = "Project Judging";
          }
          doc.text(`${timeStr} - ${eventType} at ${event.locationName}`, 20, y);
          y += 7;
        });
        y += 5;
      }
    });

    // Save the PDF
    doc.save("fll-schedule.pdf");
  }

  // Initialize schedule data from server
  const scheduleData = {
    events: JSON.parse(
      "<%- JSON.stringify(schedule.teamsSchedule.flatMap(function(team, teamIndex) { return team.map(function(event) { return { teamId: teamIndex, teamName: event.teamName, startTime: event.startTime, type: event.type, location: event.locationName, duration: event.duration }; }); }).filter(Boolean)) %>"
    ),
  };

  // Populate upcoming events
  function updateUpcomingEvents() {
    const now = new Date();
    const currentMinutes = now.getHours() * 60 + now.getMinutes();

    const upcomingEvents = scheduleData.events
      .filter((event) => event.startTime >= currentMinutes)
      .sort((a, b) => a.startTime - b.startTime)
      .slice(0, 5);

    const upcomingEventsHtml = upcomingEvents
      .map(
        (event) =>
          '<div class="flex items-center justify-between p-3 bg-white rounded-lg shadow-sm">' +
          "<div>" +
          '<p class="font-medium">' +
          '<span class="inline-block bg-blue-100 text-blue-800 px-2 py-1 rounded mr-1 text-xs">#' +
          event.teamId +
          "</span>" +
          event.teamName +
          "</p>" +
          '<p class="text-sm text-gray-500">' +
          (event.type === "tableRun"
            ? "Robot Game"
            : event.type === "robotJudging"
            ? "Robot Design"
            : "Project") +
          " at " +
          event.location +
          "</p>" +
          "</div>" +
          '<div class="text-right">' +
          '<p class="text-sm font-medium">' +
          formatTime(event.startTime) +
          "</p>" +
          "</div>" +
          "</div>"
      )
      .join("");

    document.getElementById("upcoming-events").innerHTML =
      upcomingEventsHtml ||
      '<p class="text-gray-500 text-center p-3">No upcoming events</p>';
  }

  // Update upcoming events every minute
  updateUpcomingEvents();
  setInterval(updateUpcomingEvents, 60000);

  // Populate schedule statistics
  function updateScheduleStats() {
    const stats = scheduleData.events.reduce(
      (acc, event) => ({
        totalEvents: acc.totalEvents + 1,
        robotGames: acc.robotGames + (event.type === "tableRun" ? 1 : 0),
        judgingSessions:
          acc.judgingSessions + (event.type !== "tableRun" ? 1 : 0),
        averageEventDuration: acc.averageEventDuration + event.duration,
      }),
      {
        totalEvents: 0,
        robotGames: 0,
        judgingSessions: 0,
        averageEventDuration: 0,
      }
    );

    stats.averageEventDuration = Math.round(
      stats.averageEventDuration / stats.totalEvents
    );

    document.getElementById("schedule-stats").innerHTML =
      '<div class="grid grid-cols-2 gap-4">' +
      '<div class="bg-white p-4 rounded-lg shadow-sm">' +
      '<p class="text-sm text-gray-500">Total Events</p>' +
      '<p class="text-2xl font-bold">' +
      stats.totalEvents +
      "</p>" +
      "</div>" +
      '<div class="bg-white p-4 rounded-lg shadow-sm">' +
      '<p class="text-sm text-gray-500">Robot Games</p>' +
      '<p class="text-2xl font-bold">' +
      stats.robotGames +
      "</p>" +
      "</div>" +
      '<div class="bg-white p-4 rounded-lg shadow-sm">' +
      '<p class="text-sm text-gray-500">Judging Sessions</p>' +
      '<p class="text-2xl font-bold">' +
      stats.judgingSessions +
      "</p>" +
      "</div>" +
      '<div class="bg-white p-4 rounded-lg shadow-sm">' +
      '<p class="text-sm text-gray-500">Avg Duration</p>' +
      '<p class="text-2xl font-bold">' +
      stats.averageEventDuration +
      " min</p>" +
      "</div>" +
      "</div>";
  }

  updateScheduleStats();
</script>

<style>
  .nav-link {
    @apply px-3 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-md transition-colors;
  }
  .nav-link.active {
    @apply text-blue-600 bg-blue-50;
  }
</style>
